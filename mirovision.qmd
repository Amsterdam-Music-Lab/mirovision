---
title: MIRoVision scripts
author: John Ashley Burgoyne
date: April 2023
format: html
editor_options: 
  chunk_output_type: console
---

This Quarto document conducts the analyses and generates the plots for Burgoyne, Spijkervet, and Baker's (2023) MIRoVision paper.

```{r}
#| label: setup
library(tidyverse)
library(fs)
library(tikzDevice)
library(cmdstanr)
library(extrafont)
setTikzDefaults()
options(
  mc.cores = parallel::detectCores(),
  tikzDefaultEngine = "luatex",
  tikzLatexPackages =
    c(
      getOption("tikzLatexPackages"),
      "\\usepackage{amsmath,cite,url}\n",
      "\\usepackage[T1]{fontenc}",
      "\\renewcommand{\\sfdefault}{phv}\n",
      "\\tikzset{every picture/.style={/utils/exec={\\sffamily}}}\n"
    )
)
```

```{r}
#| label: aml-theme
theme_set(ggthemes::theme_tufte(base_size = 24, base_family = "Fira Sans"))
aml_palette <- c("#D843E2", "#39D7B8", "#FFB14C",
                 "#FA5577", "#0CC7F1", "#2B2BEE",
                 "#212529", "#BDBEBF", "#F5F5F6")
options(
  ggplot2.discrete.colour = aml_palette,
  ggplot2.discrete.fill = aml_palette
)
```

## Load data

The raw data is in RDA format, with the eventual goal of making an R package.

```{r}
bookmakers <- readRDS("data/bookmakers.rda")
countries <- readRDS("data/countries.rda")
contestants <- readRDS("data/contestants.rda")
votes <- readRDS("data/votes.rda")
jurors <- readRDS("data/jurors.rda")
```

We normalise the data and add integer primary keys for Stan, using order of appearance where possible, but we do not use them as the standard foreign key in other tables.
In order to simplify the data representation, we also restrict the contests to 1975 and later, for which there is a common scoring format.
In order to support earlier years, there would need to be an extra table combining years and valid scores, and only long-format point tables would be possible.

```{r}
stan_countries <-
  contestants |>
  mutate(
    across(
      c(semifinal_number, semifinal_running_order, final_running_order),
      \(v) replace_na(v, .Machine$integer.max)
    ),
    contestant =
      dense_rank(
        pick(
          year,
          semifinal_number,
          semifinal_running_order,
          final_running_order
        )
      )
  ) |>
  group_by(country) |>
  summarise(first_contestant = min(contestant)) |>
  mutate(stan_country = dense_rank(first_contestant), .before = 1) |>
  select(-first_contestant) |>
  inner_join(countries, by = "country") |>
  arrange(stan_country)

stan_contestants <-
  contestants |>
  filter(year >= 1975L, year != 2020L) |>
  mutate(
    across(
      c(semifinal_number, semifinal_running_order, final_running_order),
      \(v) replace_na(v, .Machine$integer.max)
    ),
    stan_contestant =
      dense_rank(
        pick(
          year,
          semifinal_number,
          semifinal_running_order,
          final_running_order
        )
      ),
    .before = 1
  ) |>
  select(
    stan_contestant,
    year,
    country,
    artist = performer,
    title = song,
    composers,
    lyricists,
    lyrics,
    youtube_url
  ) |>
  arrange(stan_contestant)

stan_shows <-
  votes |>
  filter(year >= 1975L) |>
  distinct(year, round) |>
  mutate(
    round =
      fct_relevel(
        round,
        "semi-final",
        "semi-final-1",
        "semi-final-2",
        "final"
      )
  ) |>
  mutate(stan_show = dense_rank(pick(year, round)), .before = 1) |>
  arrange(stan_show)

stan_performances <-
  contestants |>
  filter(year >= 1975L, year != 2020L) |>
  select(
    year,
    country,
    semifinal_number,
    semifinal_running_order,
    final_running_order
  ) |>
  pivot_longer(
    semifinal_running_order:final_running_order,
    names_to = "type",
    names_pattern = "(.*)_running_order",
    values_to = "running_order"
  ) |>
  filter(!is.na(running_order)) |>
  mutate(
    round =
      factor(
        case_when(
          type == "semifinal" & semifinal_number == 0L ~ "semi-final",
          type == "semifinal" & semifinal_number == 1L ~ "semi-final-1",
          type == "semifinal" & semifinal_number == 2L ~ "semi-final-2",
          type == "final" ~ "final"
        ),
        levels = c("semi-final", "semi-final-1", "semi-final-2", "final")
      )
  ) |>
  mutate(stan_performance = dense_rank(pick(year, round, running_order))) |>
  arrange(stan_performance)

stan_points <-
  votes |>
  filter(year >= 1975) |>
  mutate(total_points = ifelse(is.na(jury_points), total_points, NA)) |>
  rename_at(vars(total_points:jury_points), str_remove, "_points") |>
  pivot_longer(
    total:jury,
    names_to = "type",
    values_to = "points",
    values_drop_na = TRUE
  ) |>
  mutate(
    round =
      fct_relevel(round, "semi-final", "semi-final-1", "semi-final-2", "final")
  ) |>
  inner_join(
    stan_countries |> 
      select(stan_from_country = stan_country, from_country = country)
  ) |> 
  inner_join(
    stan_countries |> 
      select(stan_to_country = stan_country, to_country = country)
  ) |> 
  inner_join(stan_shows) |> 
  inner_join(
    stan_contestants |> select(stan_contestant, year, to_country = country)
  ) |> 
  mutate(
    stan_ballot = dense_rank(pick(year, round, type, stan_from_country))
  ) |> 
  select(
    stan_ballot, stan_show, year, round, stan_from_country, from_country, type,
    stan_contestant, stan_to_country, to_country,
    points
  ) |>
  arrange(stan_ballot, desc(points))

stan_ballots <-
  stan_points |>
  group_by(
    stan_ballot,
    stan_show, year, round,
    stan_from_country, from_country,
    type
  ) |>
  summarise(
    n_alternatives = n(),
    n_ranked = sum(points > 0)
  ) |>
  ungroup() |>
  arrange(stan_ballot)
```

## Analyse previous contests

### Voting-rule analysis

To help interpret the results, we make a note of years where the winners under the Eurovision scoring system, standard Borda counts, and Copeland scores would differ.
Note that in cases where a contestant's Copeland score equals the maximum possible Copeland score, that contestant is the Condorcet winner, and if no contestant obtains the maximum possible Copeland score, there is no Condorcet winner.

```{r}
stan_points |>
  select(year, round, from_country, type, to_1 = to_country, p_1 = points) |>
  inner_join(
    stan_points |>
    select(year, round, from_country, type, to_2 = to_country, p_2 = points)
  ) |>
  filter(to_1 != to_2) |>
  group_by(year, round, to_1, to_2) |>
  summarise(
    points = sum(p_1),
    net =
      sum(
        case_when(
          p_1 > p_2 ~ 1L,
          p_1 < p_2 ~ -1L,
          TRUE ~ 0L
        )
      )
  ) |>
  summarise(
    eurovision = max(points),
    borda = sum(net),
    copeland =
      sum(
        case_when(
          net > 0 ~ 1L,
          net < 0 ~ -1L,
          TRUE ~ 0L
        )
      )
  ) |>
  mutate(max_copeland = n() - 1L) |>
  filter(
    round == "final",
    copeland == max(copeland)
    | eurovision == max(eurovision)
    | borda == max(borda)
  ) |>
  group_by(year) |>
  filter(n() > 1L) |>
  arrange(year, desc(copeland), desc(borda), desc(eurovision)) |>
  print(n = Inf)
```

### Rasch model

```{r}
contest_model <-
  cmdstan_model(
    "stan/eurovision.stan",
    cpp_options = list(stan_threads = TRUE)
  )
if (file_exists("stan/contest-fit.rds")) {
  contest_fit <- readRDS("stan/contest-fit.rds")
} else {
  contest_fit <-
    contest_model$sample(
      data =
        list(
          I = nrow(stan_shows),
          J = nrow(stan_countries),
          M = nrow(stan_points),
          N = nrow(stan_contestants),
          ii = stan_points |> pull(stan_show),
          jj = 
            stan_contestants |> 
            inner_join(stan_countries) |> 
            arrange(stan_contestant) |> 
            pull(stan_country),
          nn = stan_points |> pull(stan_contestant),
          xx = stan_points |> pull(points)
        ),
      chains = 4,
      parallel_chains = 4,
      threads_per_chain = 2,
      iter_warmup = 1000,
      iter_sampling = 1000,
      refresh = 100
    )
  contest_fit$save_object("stan/contest-fit.rds")
}
```

Check reliability using Markon's mutual-information formula.

```{r}
contest_fit$draws("beta_contestant", format = "df") |>
  select(-.chain, -.iteration) |>
  pivot_longer(-.draw, names_to = "variable", values_to = "posterior") |>
  separate_wider_regex(
    variable,
    patterns = c("beta_contestant\\[", stan_contestant = "\\d+", "\\]")
  ) |>
  inner_join(
    contest_fit$draws("contestant_prior", format = "df") |>
    select(-.chain, -.iteration) |>
    pivot_longer(-.draw, names_to = "variable", values_to = "prior") |>
    separate_wider_regex(
      variable,
      patterns = c("contestant_prior\\[", stan_contestant = "\\d+", "\\]")
    )
  ) |>
  mutate(stan_contestant = as.integer(stan_contestant)) |>
  group_by(stan_contestant) |>
  summarise(KL = FNN::KL.divergence(posterior, prior)[10], n = n()) |>
  ungroup() |>
  summarise(MI = sum(n * KL) / sum(n), R = 1 - exp(-2 * MI))
```

### Plots

```{r, eval = FALSE}
# tikz("figures/scores.tex", width = 3, height = 2)
stan_points |>
  group_by(stan_contestant, to_country) |> 
  summarise(
    year = max(year), 
    qualified = max(round == "final"), 
    final_points = sum(if_else(round == "final", points, 0L))
  ) |> 
  arrange(stan_contestant) |> 
  bind_cols(contest_fit$summary("beta_contestant")) |>
  mutate(across(mean:q95, \(x) 10 * x / log(10))) |>
  filter(year == 2019L, qualified == 1L) |>
  ggplot(aes(median, final_points)) +
  geom_smooth() +
  geom_smooth(colour = "#D843E2") +
  geom_text(
    aes(label = to_country), 
    colour = "#212529",
    family = "Fira Sans",
    fontface = "bold"
  ) +
  # ggthemes::theme_tufte(base_size = 9, base_family = "sans") +
  labs(x = "Song Competitiveness (cantobels)", y = "Final Eurovision Score")
ggsave("figures/scores.png", width = 8, height = 5)
# dev.off()
```

```{r}
stan_points |>
  group_by(stan_contestant, to_country) |> 
  summarise(
    year = max(year), 
    qualified = max(round == "final"), 
    final_points = sum(if_else(round == "final", points, 0L))
  ) |> 
  arrange(stan_contestant) |> 
  bind_cols(contest_fit$summary("beta_contestant")) |>
  filter(qualified == 1L, year >= 2016L) |> 
  mutate(across(mean:q95, \(x) 10 * x / log(10))) |>
  ggplot(aes(median, final_points)) +
  geom_smooth(colour = "#D843E2") +
  geom_text(
    aes(label = to_country), 
    colour = "#212529",
    family = "Fira Sans",
    fontface = "bold",
    size = 5
  ) +
  labs(x = "Song Competetiveness (cantobels)", y = "Final Eurovision Score") +
  facet_wrap(~ year)
ggsave("figures/scores-6.png", width = 8, height = 5)
```

```{r}
# tikz("figures/countries.tex", width = 3, height = 5)
countries |>
  arrange(country) |>
  bind_cols(
    contest_fit$summary("beta_country") |>
    transmute(quality = median, q5, q95) |>
    mutate(across(everything(), \(x) 10 * x / log(10)))
  ) |>
  mutate(
    country = fct_reorder(country, quality),
    region =
      fct_relevel(
        region,
        "Northern Europe",
        "Eastern Europe",
        "Southern Europe",
        "Western Europe",
        "Non-European"
      )
  ) |>
  ggplot(
    aes(
      country,
      quality,
      ymin = q5,
      ymax = q95,
      label = country,
      colour = region
    )
  ) +
  geom_hline(yintercept = 0, colour = "#BDBEBF") +
  geom_linerange() +
  # geom_label(size = 1.5, fontface = "bold", label.size = 0) +
  geom_label(
    size = 5, 
    family = "Fira Sans",
    fontface = "bold", 
    label.size = 0
  ) +
  scale_x_discrete(labels = NULL) +
  scale_y_continuous(
    breaks = seq(-1, 1, 1),
    # labels = c("--1.0", "0.0", "1.0")
  ) +
  scale_colour_manual(
    values =
      c(
        `Northern Europe` = "#39D7B8",
        `Eastern Europe` = "#FFB14C",
        `Southern Europe` = "#FA5577",
        `Western Europe` = "#D843E2",
        `Non-European` = "#BDBEBF"
      ),
    guide = guide_legend(ncol = 1)
  ) +
  labs(x = NULL, y = NULL, colour = NULL) +
  coord_flip() +
  # ggthemes::theme_tufte(base_size = 9, base_family = "sans") +
  theme(
    panel.grid.major.x = element_line(colour = "#BDBEBF", linetype = 3),
    axis.ticks.x = element_blank(),
    axis.ticks.y = element_blank(),
    legend.position = c(0.0, 1.0),
    legend.justification = c(0.0, 1.0),
    legend.background = element_rect(fill = "white", colour = "white")
  )
ggsave("figures/countries.png", width = 8, height = 13)
# dev.off()
```

```{r}
plot_dat <-
  stan_points |>
  rename(country = to_country) |> 
  group_by(stan_contestant, country) |> 
  summarise(
    year = max(year), 
    qualified = max(round == "final"), 
    final_points = sum(if_else(round == "final", points, 0L)),
  ) |> 
  inner_join(countries) |> 
  group_by(year) |> 
  mutate(is_winner = replace_na(dense_rank(-final_points) == 1, FALSE)) |> 
  ungroup() |> 
  arrange(stan_contestant) |> 
  bind_cols(
    contest_fit$summary("beta_contestant") |>
      transmute(quality = 10 * median / log(10))
  ) |>
  mutate(
    region =
      fct_relevel(
        region,
        "Northern Europe",
        "Eastern Europe",
        "Southern Europe",
        "Western Europe",
        "Non-European"
      )
  )
# tikz("figures/history.tex", width = 10, height = 6)
plot_dat |>
  ggplot(
    aes(
      x = year,
      y = quality,
      label = country,
      group = country,
      colour = region
    )
  ) +
  geom_line(
    data = plot_dat |> complete(year, country),
    colour = "#F5F5F6",
    # size = 1
  ) +
  geom_hline(yintercept = 0, colour = "#BDBEBF") +
  geom_text(
    data = plot_dat |> filter(!is_winner),
    size = 1.5,
    # size = 5,
    alpha = 0.7,
    family = "Fira Sans",
    fontface = "bold"
  ) +
  geom_label(
    data = plot_dat |> filter(is_winner),
    size = 1.5,
    label.padding = unit(0.15, "lines"),
    # size = 5,
    # label.size = 0.5,
    alpha = 0.7,
    family = "Fira Sans",
    fontface = "bold"
  ) +
  scale_y_continuous(
    breaks = seq(-3, 3, 1),
    # labels = c("--3", "--2", "--1", "0", "1", "2", "3")
  ) +
  scale_colour_manual(
    values =
      c(
        `Northern Europe` = "#39D7B8",
        `Eastern Europe` = "#FFB14C",
        `Southern Europe` = "#FA5577",
        `Western Europe` = "#D843E2",
        `Non-European` = "#BDBEBF"
      ),
    guide = guide_legend(ncol = 3)
  ) +
  labs(x = NULL, y = NULL, colour = NULL) +
  ggthemes::theme_tufte(base_size = 9, base_family = "Fira Sans") +
  # ggthemes::theme_tufte(base_size = 9, base_family = "sans") +
  theme(
    panel.grid.major.y = element_line(colour = "#BDBEBF", linetype = 3),
    axis.ticks.y = element_blank(),
    legend.position = c(0.05, 0.02),
    legend.justification = c(0.0, 0.0),
    legend.background = 
      element_rect(fill = "transparent", colour = "transparent")
  )
# ggsave("figures/history.png", width = 21, height = 13)
ggsave("figures/thumbnail.png", width = 6.4, height = 3.6)
# dev.off()
```

### Investigating the thresholds

```{r}
stan_shows |>
  inner_join(
    contest_fit$summary("delta") |>
      separate_wider_regex(
        variable,
        patterns =
          c("delta\\[", threshold = "\\d+", ",", stan_show = "\\d+", "\\]")
      ) |>
      mutate(across(threshold:stan_show, as.integer)),
    by = "stan_show"
  ) |>
  mutate(
    threshold = 
      case_when(threshold == 9L ~ 10L, threshold == 10L ~ 12L, TRUE ~ threshold)
  ) |> 
  filter(round == "final") |>
  select(year, threshold, delta = median) |>
  ggplot(aes(year, delta, colour = factor(threshold))) +
  geom_line() +
  labs(x = "Year", y = "Cantobels", colour = "Threshold")
```

## Analyse juror-level data

The juror data needs to be processed separately.

```{r}
juror_points <-
  jurors |>
  inner_join(stan_shows) |>
  inner_join(
    stan_countries |>
    select(stan_from_country = stan_country, from_country = country)
  ) |>
  inner_join(
    stan_countries |>
    select(stan_to_country = stan_country, to_country = country)
  ) |>
  inner_join(
    stan_contestants |> select(stan_contestant, year, to_country = country)
  ) |>
  mutate(juror_vote = row_number()) |>
  pivot_longer(
    A:E,
    names_to = "juror",
    values_to = "rank",
    values_drop_na = TRUE
  ) |>
  transmute(
    juror_vote,
    juror_show = dense_rank(stan_show),
    year,
    round,
    juror_from_country = dense_rank(stan_from_country),
    from_country,
    juror,
    juror_contestant = dense_rank(stan_contestant),
    juror_to_country = dense_rank(stan_to_country),
    to_country,
    rank
  )
```

### Voting-rule analysis

```{r}
juror_points |>
  select(year, round, from_country, juror, to_1 = to_country, r_1 = rank) |>
  inner_join(
    juror_points |>
    select(year, round, from_country, juror, to_2 = to_country, r_2 = rank)
  ) |>
  group_by(year, round, to_1, to_2) |>
  filter(to_1 != to_2) |>
  summarise(
    net =
      sum(
        case_when(
          r_1 < r_2 ~ 1L,
          r_1 > r_2 ~ -1L,
          TRUE ~ 0L
        )
      )
  ) |>
  summarise(
    borda = sum(net),
    copeland =
      sum(
        case_when(
          net > 0 ~ 1L,
          net < 0 ~ -1L,
          TRUE ~ 0L
        )
      )
  ) |>
  mutate(max_copeland = n() - 1L) |>
  filter(
    round == "final",
    copeland == max(copeland)
    | borda == max(borda)
  ) |>
  arrange(year, desc(copeland), desc(borda)) |>
  print(n = Inf)
```

### Rasch model

The model is a sort of 2PL model, which recovers an ideal scoring rule.

```{r}
juror_model <-
  cmdstan_model(
    "stan/jurors.stan",
    cpp_options = list(stan_threads = TRUE)
  )
if (file_exists("stan/juror-fit.rds")) {
  juror_fit <- readRDS("stan/juror-fit.rds")
} else {
  juror_fit <-
    juror_model$sample(
      data =
        list(
          I = juror_points |> pull(juror_show) |> max(),
          J = juror_points |> pull(juror_to_country) |> max(),
          M = nrow(juror_points),
          N = juror_points |> pull(juror_contestant) |> max(),
          ii = juror_points |> pull(juror_show),
          nn = juror_points |> pull(juror_contestant),
          jj =
            juror_points |>
            distinct(juror_contestant, juror_to_country) |>
            arrange(juror_contestant) |>
            pull(juror_to_country),
          xx = juror_points |> mutate(xx = 26 - rank) |> pull(xx)
        ),
      chains = 4,
      parallel_chains = 4,
      threads_per_chain = 2,
      iter_warmup = 1000,
      iter_sampling = 1000,
      refresh = 100
    )
  contest_fit$save_object("stan/juror-fit.rds")
}
```

### Plots

```{r}
# tikz("figures/jury.tex", width = 3, height = 2)
juror_fit$summary("scores") |>
  transmute(rank = 26 - row_number(), median, q5, q95) |>
  bind_rows(tibble_row(rank = 26, median = 0, q5 = 0, q95 = 0)) |>
  ggplot(aes(rank, median, ymin = q5, ymax = q95)) +
  geom_pointrange(size = 0.25) +
  scale_x_continuous(breaks = seq(1, 26, 5)) +
  scale_y_continuous(breaks = seq(0, 12, 2)) +
  # ggthemes::theme_tufte(base_size = 9, base_family = "sans") +
  labs(x = "Rank", y = "Ideal Score")
# dev.off()
```

## Simulate contests

In order to assess the bookmakers' performance, we need to simulate contests in order to determine the actual win probabilities per contestasnt.

```{r}
win_probs <-
  contest_fit$draws("beta_contestant", format = "df") |>
  mutate(across(everything(), sample)) |>
  mutate(sim = row_number()) |>
  pivot_longer(-sim, names_to = "stan_contestant", values_to = "quality") |>
  mutate(stan_contestant = as.integer(str_sub(stan_contestant, 17, -2))) |>
  inner_join(
    stan_contestants |>
    select(stan_contestant, year, country)
  ) |>
  group_by(year, sim) |>
  mutate(is_winner = quality == max(quality)) |>
  group_by(stan_contestant, year, country) |>
  summarise(p_win = mean(is_winner)) |>
  filter(p_win >= 0.005) |>
  arrange(year, desc(p_win)) |>
  ungroup() |>
  select(year, country, p_win)
```

### Returns

```{r}
returns <-
  bookmakers |>
  filter(round == "final") |>
  group_by(year, bookmaker) |>
  mutate(p = (1 / odds) / sum(1 / odds, na.rm = TRUE)) |>
  inner_join(win_probs) |>
  summarise(
    margin = log(sum(1 / odds, na.rm = TRUE)),
    bookmaker_profit = 1 - sum(p * odds * p_win, na.rm = TRUE),
    log_score = sum(p_win * log(p_win / p), na.rm = TRUE),
    log_return = log_score - margin
  )
```

```{r}
returns |>
  select(
    year,
    bookmaker,
    Gross = log_score,
    Net = log_return
  ) |>
  pivot_longer(Gross:Net, names_to = "type", values_to = "return") |>
  ggplot(aes(year, 100 * return, group = year, fill = factor(year))) +
  geom_dotplot(
    colour = NA,
    binaxis = "y",
    stackdir = "center",
    binwidth = 2
  ) +
  scale_x_continuous(breaks = 2015:2022) +
  scale_y_continuous(limits = c(0, NA)) +
  scale_fill_discrete(guide = NULL) +
  labs(x = NULL, y = "Log Return (%)") +
  facet_wrap(~ type, ncol = 2)
```
